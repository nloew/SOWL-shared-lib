{"name":"rotateactor","permission":{"default":0,"n8FF00qYKJUrk34v":3},"type":"script","flags":{"furnace":{"runAsGM":false},"core":{"sourceId":"Macro.5pSRmeO50bH6QtMp"}},"scope":"global","command":"// args[0] contains the name of the time to rotate, such as \"A1\"\n// Get the tile to rotate\n//var args = [\"4slots\"]\n//var args = [\"rotateWheel1\"]\n\nif (args[0] == undefined) { var args = [\"rotateWheel1\"] };\nconsole.log(canvas.tokens.placeables)\nlet myTokens = canvas.tokens.placeables;\nlet myRotateTokens = [];\n\nfor (var a in myTokens) {\n    if (typeof (myTokens[a]) == \"object\" && typeof(myTokens[a].data.actorData.name) != \"undefined\") {\n        console.log(\"not undefined\");\n        if (myTokens[a].data.actorData.name == args[0]) {\n            console.log(\"matches name\");\n            myRotateTokens.push(myTokens[a]);\n        }\n    }\n};\nfor (let t in myRotateTokens ) {\n            console.log(\"rotate\")\n            var toRotate = myRotateTokens [t].data.rotation + 90;\n            // Tiles only rotate up to 360, so reset it if we exceed that\n            if (toRotate == 360) {\n                toRotate = 0;\n            }\n            // Do the rotation\n            await myRotateTokens [t].rotate(toRotate, 90);\n            return;\n}\n\n\n//var token = canvas.tokens.placeables.filter(x => x.data.actorData.name.includes(args[0]))[0];\n//var tokens = canvas.tokens.placeables.filter(x => x.data.actorData.name.includes(args[0]));\nconsole.log(tokens)","author":"n8FF00qYKJUrk34v","img":"modules/SOWL-shared-lib/assets/SOWL.svg","actorIds":[],"_id":"4I90gE4HKExjzSnG"}
{"name":"rotateslow2","permission":{"default":0,"n8FF00qYKJUrk34v":3},"type":"script","flags":{"furnace":{"runAsGM":false},"core":{"sourceId":"Macro.9L19tbqEIj7xWmMQ"}},"scope":"global","command":"if (args[0] == undefined) { var args = [\"rotateWheel3\"] };\n//if (args[1] == undefined) { var args{1} = \"tokens\" };\nlet myTokens = canvas.tokens.placeables;\n\nfunction sleep(ms) {\n  return new Promise(resolve => setTimeout(resolve, ms));\n}\n\nasync function rotateMeSlow(target, steps, rotation) {\n    var increment = rotation/steps;\n    for (let index = 1; index <= steps; index++) {\n        console.log(\"roatateloop \"+index+\" \"+increment*index)\n        var toRotate = target.data.rotation + increment*index;\n        // Tiles only rotate up to 360, so reset it if we exceed that\n        if (toRotate >= 360) {\n            toRotate = toRotate-360;\n        }\n        // Do the rotation\n        //sleep(1100*index).then(() => { target.rotate(toRotate,increment ); });\n        await target.rotate(toRotate,increment*index);\n        //setTimeout(() => {target.rotate(toRotate,increment); }, 1100*index);\n        //return;\n    }\n}\n\nasync function rotateinsteps(mytarget,degrees){\n            rotateMeSlow(mytarget,1,degrees);\n            await sleep(300);\n            rotateMeSlow(mytarget,1,degrees);\n            await sleep(300);\n            rotateMeSlow(mytarget,1,degrees);\n            await sleep(300);\n}\nvar count = 0;\nfor (var a in myTokens) {\n    if (typeof (myTokens[a]) == \"object\" && typeof (myTokens[a].data.actorData.name) != \"undefined\") {\n        if (myTokens[a].data.actorData.name == args[0]) {\n            //console.log(\"matches name\");\n            count++;            \n            if (count == 1) {game.togglePause(true,true);} \n            rotateinsteps(myTokens[a],args[1]);\n        }\n    }\n};\nif (count != 0) {\nawait sleep(1500);\ngame.togglePause(false,true);\n}","author":"n8FF00qYKJUrk34v","img":"modules/SOWL-shared-lib/assets/SOWL.svg","actorIds":[],"_id":"4LyDEx5NyxWo4Lnb"}
{"name":"rotateToPos","permission":{"default":0,"n8FF00qYKJUrk34v":3},"type":"script","flags":{"furnace":{"runAsGM":false},"core":{"sourceId":"Macro.zYszcZpzTKROnirR"}},"scope":"global","command":"console.clear();\nconsole.log(canvas.tokens.placeables);\nif (args[0] == undefined) { var args = [\"SOWL_Controller\"] };\nif (args[1] == undefined) { args.push(\"50\") };\n//if (args[\"delayTimer\"] == undefined) { args[\"delayTimer\"] = \"30\" };\n\nfunction sleep(ms) {\n    return new Promise(resolve => setTimeout(resolve, ms));\n}\n\nfunction getAllNamedTokens(storageEntity) {\n    let allTokens = canvas.tokens.placeables;\n    for (var a in allTokens) {\n        if (typeof (allTokens[a]) == \"object\" && typeof (allTokens[a].data.actorData.name) != \"undefined\") {\n            storageEntity.push(allTokens[a]);\n        }\n    };\n}\n\nasync function rotateinsteps(target,degrees, counter, delayTimer) {\n    if (counter != 0) {\n        rotateMe(target, degrees);\n        await sleep(delayTimer);\n        counter--;\n        rotateinsteps(target, degrees, counter, delayTimer)\n        console.log(\"Looping...\" + counter);\n    }\n}\n\nasync function rotateMe(target, rotation) {\n    var toRotate = target.data.rotation + rotation;\n    // Tiles only rotate up to 360, so reset it if we exceed that\n    if (toRotate >= 360) {\n        toRotate = toRotate - 360;\n    }\n    await target.rotate(toRotate);\n}\n\nlet myTokens = [];\ngetAllNamedTokens(myTokens);\n\nconsole.log(myTokens);\nconsole.log(args);\n\nvar SOWLtarget = myTokens.filter(x => x.data.actorData.name.includes(\"SOWL_Controller\"))[0];\nrotateinsteps(SOWLtarget,10,9,args[1]);\n\n/*\nvar count = 0;\nfor (var a in myTokens) {\n    if (typeof (myTokens[a]) == \"object\" && typeof (myTokens[a].data.actorData.name) != \"undefined\") {\n        if (myTokens[a].data.actorData.name == args[0]) {\n            //console.log(\"matches name\");\n            count++;\n            if (count == 1) {game.togglePause(true,true);}\n            rotateinsteps(myTokens[a],args[1]);\n        }\n    }\n};\nif (count != 0) {\nawait sleep(1500);\ngame.togglePause(false,true);\n}\n*/","author":"n8FF00qYKJUrk34v","img":"icons/svg/dice-target.svg","actorIds":[],"_id":"75z3AnDi1w7sQE3i"}
{"name":"SwitchLights","permission":{"default":0,"n8FF00qYKJUrk34v":3},"type":"script","flags":{"furnace":{"runAsGM":false},"core":{"sourceId":"Macro.fbGq1if8sepMKr0j"}},"scope":"global","command":"//console.log(token)\n//.data.actorData.name+\"  \"+args\n\nvar triggeractor = token.data.actorData.name\nvar triggerlight = args\n\nif (triggeractor == triggerlight ) {\n   game.LightSwitch.flipTheSwitchGM(args)\n}","author":"n8FF00qYKJUrk34v","img":"modules/SOWL-shared-lib/assets/SOWL.svg","actorIds":[],"_id":"dDni9msiZFJKuLIj"}
{"name":"rotateSlow","permission":{"default":0,"n8FF00qYKJUrk34v":3},"type":"script","flags":{"furnace":{"runAsGM":false},"core":{"sourceId":"Macro.aWqgNsR3OsRcv0KL"}},"scope":"global","command":"if (args[0] == undefined) { var args = [\"rotateWheel3\"] };\n//if (args[1] == undefined) { var args{1} = \"tokens\" };\nlet myTokens = canvas.tokens.placeables;\n\nfunction sleep(ms) {\n  return new Promise(resolve => setTimeout(resolve, ms));\n}\n\nasync function rotateMeSlow(target, steps, rotation) {\n    var increment = rotation/steps;\n    for (let index = 1; index <= steps; index++) {\n        console.log(\"roatateloop \"+index+\" \"+increment*index)\n        var toRotate = target.data.rotation + increment*index;\n        // Tiles only rotate up to 360, so reset it if we exceed that\n        if (toRotate >= 360) {\n            toRotate = toRotate-360;\n        }\n        // Do the rotation\n        //sleep(1100*index).then(() => { target.rotate(toRotate,increment ); });\n        await target.rotate(toRotate,increment*index);\n        //setTimeout(() => {target.rotate(toRotate,increment); }, 1100*index);\n        //return;\n    }\n}\n\nasync function rotateinsteps(mytarget){\n            rotateMeSlow(mytarget,1,30);\n            await sleep(500);\n            rotateMeSlow(mytarget,1,30);\n            await sleep(500);\n            rotateMeSlow(mytarget,1,30);\n            await sleep(500);\n}\nvar count = 0;\nfor (var a in myTokens) {\n    if (typeof (myTokens[a]) == \"object\" && typeof (myTokens[a].data.actorData.name) != \"undefined\") {\n        if (myTokens[a].data.actorData.name == args[0]) {\n            //console.log(\"matches name\");\n            count++;            \n            if (count == 1) {game.togglePause(true,true);} \n            rotateinsteps(myTokens[a]);\n        }\n    }\n};\nif (count != 0) {\nawait sleep(1500);\ngame.togglePause(false,true);\n}","author":"n8FF00qYKJUrk34v","img":"modules/SOWL-shared-lib/assets/SOWL.svg","actorIds":[],"_id":"id2TvH8dQAtYFZri"}
{"name":"checkRingPuzzle","permission":{"default":0,"n8FF00qYKJUrk34v":3},"type":"script","flags":{"furnace":{"runAsGM":false},"core":{"sourceId":"Macro.PuGazHjl4Uu2bbuc"}},"scope":"global","command":"console.log(\"Checking SOWL Ring Puzzle\");\nvar largeRing = canvas.tokens.placeables.filter(x => x.data.actorData.name.includes(\"largeRing\"))[0];\nvar mediumRing = canvas.tokens.placeables.filter(x => x.data.actorData.name.includes(\"mediumRing\"))[0];\nvar smallRing = canvas.tokens.placeables.filter(x => x.data.actorData.name.includes(\"smallRing\"))[0];\nvar SOWL_Controller = canvas.tokens.placeables.filter(x => x.data.actorData.name.includes(\"SOWL_Controller\"))[0];\n\nconsole.log(SOWL_Controller);\n\nif (typeof (SOWL_Controller.data.flags[\"SOWL\"]) == \"undefined\") {\n    SOWL_Controller.data.flags[\"SOWL\"] = [];\n    SOWL_Controller.data.flags[\"SOWL\"][\"puzzlecounter\"] = 1;\n}\n\nif (smallRing.x === mediumRing.x && (mediumRing.x === Math.round(largeRing.x))) {\n    console.log(\"SOWL Ring Puzzle: SOLVED\");\n    SOWL_Controller.data.flags[\"SOWL\"][\"puzzlecounter\"][\"solved\"] = true\n    game.LightSwitch.flipTheSwitchGM(\"ringPuzzleSolved\")\n    game.togglePause(false, true);\n}\n\nSOWL_Controller.data.flags[\"SOWL\"][\"puzzlecounter\"]++;\nif (SOWL_Controller.data.flags[\"SOWL\"][\"puzzlecounter\"] > 3 && !SOWL_Controller.data.flags[\"SOWL\"][\"solved\"]) {\n    SOWL_Controller.data.flags[\"SOWL\"][\"puzzlecounter\"] = 1;\n    console.log(\"SOWL Ring Puzzle: RESET\");\n    canvas.tokens.placeables.filter(x => x.data.actorData.name.includes(\"R1\"))[0].rotate(0, 90)\n    canvas.tokens.placeables.filter(x => x.data.actorData.name.includes(\"R2\"))[0].rotate(0, 90)\n    canvas.tokens.placeables.filter(x => x.data.actorData.name.includes(\"R3\"))[0].rotate(0, 90)\n}","author":"n8FF00qYKJUrk34v","img":"modules/SOWL-shared-lib/assets/SOWL.svg","actorIds":[],"_id":"v9pw5Rws6OwFXAe9"}
{"name":"rotatetile","permission":{"default":0,"n8FF00qYKJUrk34v":3},"type":"script","flags":{"furnace":{"runAsGM":false},"core":{"sourceId":"Macro.EBTbXtFexlVKjxqb"}},"scope":"global","command":"// args[0] contains the name of the time to rotate, such as \"A1\"\n// Get the tile to rotate\nvar args = [\"4slots\"]\n//console.log(canvas.tiles.placeables)\nvar tile = canvas.tiles.placeables.filter(x => x.data.img.includes(args[0]))[0];\nconsole.log(tile)\nvar toRotate = tile.data.rotation + 90;\n// Tiles only rotate up to 360, so reset it if we exceed that\nif (toRotate == 360) {\n  toRotate = 0;\n}\n\n// Do the rotation\nawait tile.rotate(toRotate, 90);\nreturn;","author":"n8FF00qYKJUrk34v","img":"modules/SOWL-shared-lib/assets/SOWL.svg","actorIds":[],"_id":"yuZE9uUTxVGGmiTl"}
{"$$deleted":true,"_id":"75z3AnDi1w7sQE3i"}
{"$$deleted":true,"_id":"dDni9msiZFJKuLIj"}
{"$$deleted":true,"_id":"yuZE9uUTxVGGmiTl"}
{"$$deleted":true,"_id":"4LyDEx5NyxWo4Lnb"}
{"$$deleted":true,"_id":"id2TvH8dQAtYFZri"}
{"$$deleted":true,"_id":"4I90gE4HKExjzSnG"}
{"$$deleted":true,"_id":"v9pw5Rws6OwFXAe9"}
{"name":"SwitchLights","permission":{"default":0,"n8FF00qYKJUrk34v":3},"type":"script","flags":{"furnace":{"runAsGM":false},"core":{"sourceId":"Macro.fbGq1if8sepMKr0j"}},"scope":"global","command":"//console.log(token)\n//.data.actorData.name+\"  \"+args\n\nvar triggeractor = token.data.actorData.name\nvar triggerlight = args\n\nif (triggeractor == triggerlight ) {\n   game.LightSwitch.flipTheSwitchGM(args)\n}","author":"n8FF00qYKJUrk34v","img":"modules/SOWL-shared-lib/assets/SOWL.svg","actorIds":[],"_id":"9iBVvMaH1UZ54vtx"}
{"name":"SOWL_rotateEntity","permission":{"default":0,"n8FF00qYKJUrk34v":3},"type":"script","flags":{"furnace":{"runAsGM":false},"core":{"sourceId":"Macro.tw3JNU3xuXV9Su8I"}},"scope":"global","command":"console.clear();\nif(game.paused){return;}\n//console.log(args);\nif (args[0] == undefined) { var args = [\"SOWL_Controller\"] };\nif (args[1] == undefined) { args.push(\"rotateBy\") };\nif (args[2] == undefined) { args.push(\"90\") };\nif (args[3] == undefined) { args.push(\"tokens\") };\nif (args[4] == undefined) { args.push(\"50\") };\n\nvar target = args[0];\nvar rotateMode = args[1];\nvar degrees = args[2];\nvar mode = args[3];\nvar rotateSpeed = args[4];\n\n\nif (mode == \"tokens\") {\n   var myTokens = game.SOWL._getAllNamedTokens();\n} else {\n   var myTokens = game.SOWL._getAllTiles();\n}\n\nconsole.log(myTokens)\n\nlet SOWLtarget = myTokens.filter(x => x.data.actorData.name.includes(target))[0];\n//console.log(SOWLtarget)\n\nif (rotateMode == \"rotateBy\") {\n    game.SOWL._SOWL_rotateTokenBy(SOWLtarget, degrees , rotateSpeed);\n} else if (rotateMode == \"rotateTo\") {\n   game.SOWL._SOWL_rotateMeTo(SOWLtarget, degrees, rotateSpeed);\n}","author":"n8FF00qYKJUrk34v","img":"modules/SOWL-shared-lib/assets/SOWL.svg","actorIds":[],"_id":"oUg55UuojRSiii3m"}
{"name":"SOWL_checkRingPuzzle","permission":{"default":0,"n8FF00qYKJUrk34v":3},"type":"script","flags":{"furnace":{"runAsGM":true},"core":{"sourceId":"Macro.PuGazHjl4Uu2bbuc"}},"scope":"global","command":"//console.clear();\nlet myTokens = [];\ngame.SOWL._getAllNamedTokens(myTokens);\nvar largeRing = myTokens.filter(x => x.data.actorData.name.includes(\"largeRing\"))[0];\nvar mediumRing = myTokens.filter(x => x.data.actorData.name.includes(\"mediumRing\"))[0];\nvar smallRing = myTokens.filter(x => x.data.actorData.name.includes(\"smallRing\"))[0];\nvar largeRingController = myTokens.filter(x => x.data.actorData.name.includes(\"SOWL_RingPuzzle_1\"))[0];\nvar mediumRingController = myTokens.filter(x => x.data.actorData.name.includes(\"SOWL_RingPuzzle_2\"))[0];\nvar smallRingController = myTokens.filter(x => x.data.actorData.name.includes(\"SOWL_RingPuzzle_3\"))[0];\nvar SOWL_Controller = myTokens.filter(x => x.data.actorData.name.includes(\"SOWL_Controller\"))[0];\nlet rotateSpeed = 50;\nconsole.log(SOWL_Controller.data.flags.SOWL);\n//console.log(SOWL_Controller.data);\n//console.log(game.SOWL);\ngame.SOWL._puzzleController = SOWL_Controller;  \n//SOWL_Controller.data.flags[\"SOWL\"][\"allowCheck\"] = true;\n//SOWL_ResetPuzzle()\n\nif (typeof (SOWL_Controller.data.flags[\"SOWL\"]) == \"undefined\") {\n    console.log(\"SOWL Rotate Puzzle INIT\");\n    SOWL_Controller.data.flags[\"SOWL\"] = [];\n    SOWL_Controller.data.flags[\"SOWL\"][\"solved\"] = false;\n    SOWL_Controller.data.flags[\"SOWL\"][\"puzzlecounter\"] = 1;\n    SOWL_Controller.data.flags[\"SOWL\"][\"allowCheck\"] = true\n}\n\nfunction SOWL_ResetPuzzle() {\n    console.log(\"SOWL Ring Puzzle: RESET CALLED\");\n    game.SOWL._SOWL_rotateMeTo(largeRingController, 0, rotateSpeed);\n    game.SOWL._SOWL_rotateMeTo(mediumRingController, 0, rotateSpeed);\n    game.SOWL._SOWL_rotateMeTo(smallRingController, 0, rotateSpeed);\n    SOWL_Controller.data.flags[\"SOWL\"][\"puzzlecounter\"] = 1;\n    SOWL_Controller.data.flags[\"SOWL\"][\"solved\"] = false;\n    SOWL_Controller.data.flags[\"SOWL\"][\"allowCheck\"] = false;\n    //game.togglePause(true, true);\n    //game.LightSwitch.flipTheSwitchGM(\"ringPuzzleSolved\");\n}\n\nfunction SOWLTestHook(target) {\n    //console.log(\"Hook called\");\n    //console.log(target.data.flags[\"SOWL\"]);\n    //target.data.flags[\"SOWL\"][\"allowCheck\"] = true;\n    //game.togglePause(false, true);\n}\n\nfunction SOWL_CheckSolved() {\n    console.log(SOWL_Controller.data.flags[\"SOWL\"][\"puzzlecounter\"])\n    if (!SOWL_Controller.data.flags[\"SOWL\"][\"allowCheck\"]) { return; }\n    SOWL_Controller.data.flags[\"SOWL\"][\"puzzlecounter\"]++;\n    console.log(\"SOWL Ring Puzzle: Check\");\n    if (Math.round(smallRing.x) === Math.round(mediumRing.x) && (Math.round(mediumRing.x) === Math.round(largeRing.x))) {\n        console.log(\"SOWL Ring Puzzle: SOLVED\");\n        SOWL_Controller.data.flags[\"SOWL\"][\"solved\"] = true\n        game.LightSwitch.flipTheSwitchGM(\"ringPuzzleSolved\")\n        game.togglePause(false, true);\n    } else {\n        console.log(\"SOWL Ring Puzzle: RESET: Too many tries\");\n        SOWL_ResetPuzzle()\n    }\n}\nconsole.log(smallRing.x);\nconsole.log(mediumRing.x);\nconsole.log(largeRing.x);\nif (args[0] == \"reset\") {\ngame.LightSwitch.flipTheSwitchGM(\"ringPuzzleSolved\")\nSOWL_ResetPuzzle()\n} else {\nSOWL_CheckSolved();\n}","author":"n8FF00qYKJUrk34v","img":"modules/SOWL-shared-lib/assets/SOWL.svg","actorIds":[],"_id":"A2NP1leEXabGUtqF"}
{"$$deleted":true,"_id":"A2NP1leEXabGUtqF"}
{"name":"SOWL_checkRingPuzzle","permission":{"default":0,"n8FF00qYKJUrk34v":3},"type":"script","flags":{"furnace":{"runAsGM":true},"core":{"sourceId":"Macro.PuGazHjl4Uu2bbuc"}},"scope":"global","command":"console.clear();\nlet myTokens = game.SOWL._getAllNamedTokens();\n\nvar largeRing = myTokens.filter(x => x.data.actorData.name.includes(\"largeRing\"))[0];\nvar mediumRing = myTokens.filter(x => x.data.actorData.name.includes(\"mediumRing\"))[0];\nvar smallRing = myTokens.filter(x => x.data.actorData.name.includes(\"smallRing\"))[0];\nvar largeRingController = myTokens.filter(x => x.data.actorData.name.includes(\"SOWL_RingPuzzle_1\"))[0];\nvar mediumRingController = myTokens.filter(x => x.data.actorData.name.includes(\"SOWL_RingPuzzle_2\"))[0];\nvar smallRingController = myTokens.filter(x => x.data.actorData.name.includes(\"SOWL_RingPuzzle_3\"))[0];\nvar SOWL_Controller = myTokens.filter(x => x.data.actorData.name.includes(\"SOWL_Controller\"))[0];\nlet rotateSpeed = 50;\nconsole.log(SOWL_Controller.data.flags.SOWL);\n//console.log(SOWL_Controller.data);\n//console.log(game.SOWL);\ngame.SOWL._puzzleController = SOWL_Controller;  \n//SOWL_Controller.data.flags[\"SOWL\"][\"allowCheck\"] = true;\n//SOWL_ResetPuzzle()\n\nif (typeof (SOWL_Controller.data.flags[\"SOWL\"]) == \"undefined\") {\n    console.log(\"SOWL Rotate Puzzle INIT\");\n    SOWL_Controller.data.flags[\"SOWL\"] = [];\n    SOWL_Controller.data.flags[\"SOWL\"][\"solved\"] = false;\n    SOWL_Controller.data.flags[\"SOWL\"][\"puzzlecounter\"] = 1;\n    SOWL_Controller.data.flags[\"SOWL\"][\"allowCheck\"] = true\n}\n\nfunction SOWL_ResetPuzzle() {\n    console.log(\"SOWL Ring Puzzle: RESET CALLED\");\n    game.SOWL._SOWL_rotateMeTo(largeRingController, 0, rotateSpeed);\n    game.SOWL._SOWL_rotateMeTo(mediumRingController, 0, rotateSpeed);\n    game.SOWL._SOWL_rotateMeTo(smallRingController, 0, rotateSpeed);\n    SOWL_Controller.data.flags[\"SOWL\"][\"puzzlecounter\"] = 1;\n    SOWL_Controller.data.flags[\"SOWL\"][\"solved\"] = false;\n    SOWL_Controller.data.flags[\"SOWL\"][\"allowCheck\"] = false;\n    //game.togglePause(true, true);\n    //game.LightSwitch.flipTheSwitchGM(\"ringPuzzleSolved\");\n}\n\nfunction SOWLTestHook(target) {\n    //console.log(\"Hook called\");\n    //console.log(target.data.flags[\"SOWL\"]);\n    //target.data.flags[\"SOWL\"][\"allowCheck\"] = true;\n    //game.togglePause(false, true);\n}\n\nfunction SOWL_CheckSolved() {\n    console.log(SOWL_Controller.data.flags[\"SOWL\"][\"puzzlecounter\"])\n    if (!SOWL_Controller.data.flags[\"SOWL\"][\"allowCheck\"]) { return; }\n    SOWL_Controller.data.flags[\"SOWL\"][\"puzzlecounter\"]++;\n    console.log(\"SOWL Ring Puzzle: Check\");\n    if (Math.round(smallRing.x) === Math.round(mediumRing.x) && (Math.round(mediumRing.x) === Math.round(largeRing.x))) {\n        console.log(\"SOWL Ring Puzzle: SOLVED\");\n        SOWL_Controller.data.flags[\"SOWL\"][\"solved\"] = true\n        game.LightSwitch.flipTheSwitchGM(\"ringPuzzleSolved\")\n        game.togglePause(false, true);\n    } else {\n        console.log(\"SOWL Ring Puzzle: RESET: Too many tries\");\n        SOWL_ResetPuzzle()\n    }\n}\nconsole.log(smallRing.x);\nconsole.log(mediumRing.x);\nconsole.log(largeRing.x);\nif (args[0] == \"reset\") {\ngame.LightSwitch.flipTheSwitchGM(\"ringPuzzleSolved\")\nSOWL_ResetPuzzle()\n} else {\nSOWL_CheckSolved();\n}","author":"n8FF00qYKJUrk34v","img":"modules/SOWL-shared-lib/assets/SOWL.svg","actorIds":[],"_id":"Ab7UA2XVk5r8XoXm"}
